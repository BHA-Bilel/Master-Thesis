import gensim
from gensim.models import Doc2Vec

from webapp.fatwas.models import Hadj, Salat, Sawm, Zakat
from webapp.qasystem.utils import update_sim_report
from webapp.qasystem.model.preprocess_docs import pre_process
from webapp.qasystem.serialize import Data
from os.path import dirname, abspath

# generated by code
MODELS_PATH = dirname(abspath(__file__)) + '/models/doc2vec_sim/'

topic_to_id = {"Hadj": 0, "Salat": 1, "Sawm": 2, "Zakat": 3}


def read_corpus(dataset):
    i = 0
    file_no = 0
    train_corpus = []
    for data in dataset:
        document = pre_process(data.question)
        words = document.split(" ")
        train_corpus.append(gensim.models.doc2vec.TaggedDocument(words, [i]))
        i += 1
        file_no += 1
    return train_corpus


def create_models(topic, dataset):
    train_corpus = read_corpus(dataset)
    if topic == 'Hadj':
        # creating and training the model with their corpuses
        Hadjmodel = gensim.models.doc2vec.Doc2Vec(vector_size=50, window=10, min_count=1, workers=8, alpha=0.025,
                                                  min_alpha=0.015, epochs=100, dm=0)
        Hadjmodel.build_vocab(train_corpus)
        Hadjmodel.train(train_corpus, total_examples=len(train_corpus), epochs=Hadjmodel.epochs)
        # saving the model to disk
        Hadjmodel.save(MODELS_PATH + "Hadj.model")
        update_sim_report(hadj_data=len(train_corpus))
    elif topic == 'Salat':
        Salatmodel = gensim.models.doc2vec.Doc2Vec(vector_size=50, window=10, min_count=1, workers=8, alpha=0.025,
                                                   min_alpha=0.015, epochs=100, dm=0)
        Salatmodel.build_vocab(train_corpus)
        Salatmodel.train(train_corpus, total_examples=len(train_corpus), epochs=Salatmodel.epochs)
        Salatmodel.save(MODELS_PATH + "Salat.model")
        update_sim_report(salat_data=len(train_corpus))
    elif topic == 'Sawm':
        Sawmmodel = gensim.models.doc2vec.Doc2Vec(vector_size=50, window=10, min_count=1, workers=8, alpha=0.025,
                                                  min_alpha=0.015, epochs=100, dm=0)
        Sawmmodel.build_vocab(train_corpus)
        Sawmmodel.train(train_corpus, total_examples=len(train_corpus), epochs=Sawmmodel.epochs)
        Sawmmodel.save(MODELS_PATH + "Sawm.model")
        update_sim_report(sawm_data=len(train_corpus))
    elif topic == 'Zakat':
        Zakatmodel = gensim.models.doc2vec.Doc2Vec(vector_size=50, window=10, min_count=1, workers=8, alpha=0.025,
                                                   min_alpha=0.015, epochs=100, dm=0)
        Zakatmodel.build_vocab(train_corpus)
        Zakatmodel.train(train_corpus, total_examples=len(train_corpus), epochs=Zakatmodel.epochs)
        Zakatmodel.save(MODELS_PATH + "Zakat.model")
        update_sim_report(zakat_data=len(train_corpus))
    # todo fatwa class else
    return len(train_corpus)


def get_sim(model_name, tokenized_doc):
    if model_name == 'Hadj':
        Hadjmodel = Doc2Vec.load(MODELS_PATH + "Hadj.model")
        model = Hadjmodel
        dbmodel = Hadj
    elif model_name == 'Salat':
        Salatmodel = Doc2Vec.load(MODELS_PATH + "Salat.model")
        model = Salatmodel
        dbmodel = Salat
    elif model_name == 'Sawm':
        Sawmmodel = Doc2Vec.load(MODELS_PATH + "Sawm.model")
        model = Sawmmodel
        dbmodel = Sawm
    else:
        Zakatmodel = Doc2Vec.load(MODELS_PATH + "Zakat.model")
        model = Zakatmodel
        dbmodel = Zakat

    inferred_vector = model.infer_vector(tokenized_doc.split())
    sims = model.docvecs.most_similar([inferred_vector], topn=len(model.docvecs))

    document_order = 1
    result = []
    for similarity in sims:
        if similarity[1] < 0.5 or document_order > 5:
            break
        doc_id = similarity[0] + 1
        instance = dbmodel.query.filter_by(id=int(doc_id)).first()
        if instance:
            result.append(
                Data(model='DOC2VEC', similarity=str(similarity[1]), path=int(doc_id),
                     question=instance.question, answer=instance.answer,
                     fatwa_id=instance.id, mufti_id=instance.mufti_id))
        document_order += 1
    return result

# in this implementation you should provide the right model_name with the user query in order to obtain the similar documents
